//
//  LWEDownloader.h
//  jFlash
//
//  Created by Mark Makdad on 5/27/10.
//  Copyright 2010 Long Weekend Inc. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <zlib.h>
#import "LWEFile.h"
#import "ASIHTTPRequest.h"

// For ZIP extension
#define CHUNK 16384

//! State machine for the downloader
typedef enum _downloaderStates
{
  kDownloaderInactive,                //! Downloader inactive
  kDownloaderCancelled,               //! Downloader cancelled
  kDownloaderRetrievingMetaData,      //! Retrieving data about to-be-downloaded package
  kDownloaderRetrievingData,          //! Retrieving actual data
  kDownloaderNetworkFail,             //! Network lost/timeout (no data within certain time period)
  kDownloaderDownloadComplete,        //! Download complete (no more data)
  kDownloaderDecompressing,           //! Unzipping downloaded file
  kDownloaderDecompressFail,          //! Downloaded, but unzip failed (need to delete download file bf trying again)
  kDownloaderInstallFail,             //! Downloaded, unzipped, but not installed properly
  kDownloaderSuccess                  //! Downloaded & verified
} downloaderStates;

@protocol LWEDownloaderInstallerDelegate <NSObject>
@required
//! Returns YES if install was successful, NO on failure
- (BOOL)installPluginWithPath:(NSString *)filename;
// TODO: add failure reason
@end

//! Generalized downloader that retrieves files via HTTP asynchronously and optionally unzips them
@interface LWEDownloader : NSObject <ASIHTTPRequestDelegate>

{
  NSURL *targetURL;                   //! HTTP address of the file to get
  NSInteger downloaderState;          //! Internal class state - where are we in the download process (cf _downloaderStates)
  NSString *targetFilename;           //! Full path filename where the downloaded data will be placed
  NSString *_compressedFilename;      //! Interim (full path) filename to be used if receiving compressed file - generated by the class
  
  //! "Private" variable holding request instance
  ASIHTTPRequest *_request;
  
  //! Delegate for installation methods
  id<LWEDownloaderInstallerDelegate> delegate;
  
  //! Status messages et al for observers
  NSString *taskMessage;
  NSString *statusMessage;
  NSInteger statusCode;
  float progress;
  int requestSize;
  
  BOOL _remoteFileIsGzipCompressed;   //! Is the remote URL a Gzip file?
  BOOL _unzipShouldCancel;            //! State variable to communicate w/ background unzip thread
}

// Psuedo private methods
- (BOOL) _updateInternalState:(NSInteger)nextState;
- (BOOL) _updateInternalState:(NSInteger)nextState withTaskMessage:(NSString*)taskMsg;

// Custom getter & setter for progress
- (float) progress;
- (void) setProgress:(float)progress;
- (void) setProgressFromBackgroundThread:(NSNumber*)tmpNum;


// Class methods
- (id) initWithTargetURL: (NSString *) target targetFilename:(NSString*)targetFilename;
- (void) startDownload;
- (void) cancelDownload;
- (BOOL) isFailureState;
- (BOOL) isSuccessState;

//! Unzip file we have just downloaded - designed for background thread
- (BOOL) _unzipDownloadedFile;

//! Internal method to kick off delegate
- (void) _verifyDownload;

//! Method that can (and should) be delegated via  LWEDownloaderInstallerDelegate protocol
- (BOOL) installPluginWithPath:(NSString *)filename;

// ASIHTTPRequest delegate methods
- (void)requestReceivedResponseHeaders:(ASIHTTPRequest *)request;
- (void)requestFinished:(ASIHTTPRequest *) request;
- (void)requestFailed:(ASIHTTPRequest *) request;


@property (nonatomic, retain) NSURL *targetURL;
@property (nonatomic, retain) NSString *targetFilename;
@property (nonatomic, retain) NSString *taskMessage;
@property (nonatomic, retain) NSString *statusMessage;
@property (assign, nonatomic, readwrite) id delegate;
@property float progress;

@end
